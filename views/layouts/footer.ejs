<footer class="footer-area section-padding-1 border-top-3">
    <div class="container-fluid">
        <div class="footer-top pt-100 pb-60">
            <div class="row">
                <div class="footer-column footer-width-25">
                    <div class="footer-widget footer-about mb-30">
                        <a href="index.html">
                            <img src="/assets/images/logo/logo.png" alt="logo">
                        </a>
                        <p>Lorem ipsum dolor sit amet, magna habemus ius ad, qui minimum voluptar</p>
                        <div class="social-icon-style-2 social-icon-hm4">
                            <a class="facebook" href="#"><i class="fa fa-facebook"></i></a>
                            <a class="twitter" href="#"><i class="fa fa-twitter"></i></a>
                            <a class="youtube" href="#"><i class="fa fa-youtube"></i></a>
                            <a class="dribbble" href="#"><i class="fa fa-dribbble"></i></a>
                        </div>
                    </div>
                </div>
                <div class="footer-column footer-width-25">
                    <div class="footer-widget footer-info-list-2 mb-30">
                        <h3 class="footer-title">Company Link</h3>
                        <ul>
                            <li><a href="#">Home</a></li>
                            <li><a href="/allProducts">Shop Now</a></li>
                            <li><a href="/cart">Cart</a></li>
                            <li><a href="/wishlist">Wishlist</a></li>
                            <!-- <li><a href="#">The Blog</a></li> -->
                        </ul>
                    </div>
                </div>
                <div class="footer-column footer-width-15">
                    <div class="footer-widget footer-info-list-2 footer-contect mb-30">
                        <h3 class="footer-title">Contact info</h3>
                        <ul>
                            <li><i class="dlicon ui-2_time-clock"></i> Monday - Friday: 9:00 - 19:00</li>
                            <li><i class="dlicon ui-1_email-83"></i> info@example.com</li>
                            <li><i class="dlicon tech-2_rotate"></i> (+612) 2531 5600</li>
                            <li><i class="dlicon ui-1_home-simple"></i> Angamaly 683572 kerala India</li>
                        </ul>
                    </div>
                </div>
                <div class="footer-column footer-width-29 mb-35">
                    <div class="contact-page-map">
                        <div id="contact-map">
                            <iframe
                                src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d62827.676818062995!2d76.33981212868586!3d10.202583843744529!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3b080665e0bb9959%3A0x19b75e6b4e671ef1!2sAngamaly%2C%20Kerala!5e0!3m2!1sen!2sin!4v1735385667845!5m2!1sen!2sin"
                                style="border:0;width:100%;height:100%;" allowfullscreen="" loading="lazy"></iframe>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="footer-botoom">
            <div class="row">
                <div class="col-12">
                    <div class="copyright-2 text-center">
                        <p>Â© 2021 Tenue. All rights reserved.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</footer>
<!-- All JS is here
============================================ -->

<!-- Modernizer JS -->
<script src="/assets/js/vendor/modernizr-3.11.7.min.js"></script>
<!-- jquery -->
<script src="/assets/js/vendor/jquery-v3.6.0.min.js"></script>
<!-- Popper JS -->
<script src="/assets/js/vendor/popper.js"></script>
<!-- Bootstrap JS -->
<script src="/assets/js/vendor/bootstrap.min.js"></script>
<script src="/assets/js/plugins/owl-carousel.js"></script>
<script src="/assets/js/plugins/slick.js"></script>
<script src="/assets/js/plugins/jarallax.min.js"></script>
<script src="/assets/js/plugins/countdown.js"></script>
<script src="/assets/js/plugins/magnific-popup.js"></script>
<script src="/assets/js/plugins/instafeed.js"></script>
<script src="/assets/js/plugins/tilt.js"></script>
<script src="/assets/js/plugins/images-loaded.js"></script>
<script src="/assets/js/plugins/isotope.js"></script>
<script src="/assets/js/plugins/scrolloverflow-fullpage.js"></script>
<script src="/assets/js/plugins/fullpage.js"></script>
<script src="/assets/js/plugins/jquery-ui.js"></script>
<script src="/assets/js/plugins/jquery-ui-touch-punch.js"></script>
<script src="/assets/js/plugins/easyzoom.js"></script>
<script src="/assets/js/plugins/resizesensor.js"></script>
<script src="/assets/js/plugins/sticky-sidebar.js"></script>
<script src="/assets/js/plugins/scrollup.js"></script>
<script src="/assets/js/plugins/select2.min.js"></script>
<script src="/assets/js/plugins/cookie.js"></script>
<script src="/assets/js/plugins/bpopup.js"></script>
<script src="/assets/js/plugins/wow.js"></script>
<script src="/assets/js/plugins/ajax-mail.js"></script>
<!-- Main JS -->
<script src="/assets/js/main.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!--razorpay-->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>

<!-- Your Size Selection Script -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const sizeOptions = document.querySelectorAll('.size-option');
        const selectedSizeInput = document.getElementById('selectedSize');
        const addToCartButton = document.getElementById('addToCartButton');

        sizeOptions.forEach(option => {
            option.addEventListener('click', function (event) {
                event.preventDefault();
                sizeOptions.forEach(opt => opt.classList.remove('active'));
                this.classList.add('active');
                selectedSizeInput.value = this.getAttribute('data-size');
            });
        });

        addToCartButton.addEventListener('click', function (event) {
            if (!selectedSizeInput.value) {
                event.preventDefault();
                alert('Please select a size before adding to cart.');
            }
        });
    });

</script>

<script>
    // Function to create HTML for the new address
    function addAddressToPage(address) {
        // Select the container where the addresses are listed
        const addressSelectionDiv = document.getElementById('address-selection');

        // Create a new div element for the address
        const addressDiv = document.createElement('div');
        addressDiv.className = 'address-item'; // Add class for styling

        // Set up the HTML structure for the new address
        addressDiv.innerHTML = `
            <h4>${address.firstName} ${address.lastName}</h4>
            <p>${address.houseNo}, ${address.street}, ${address.landmark}</p>
            <p>${address.city}, ${address.district}, ${address.state} - ${address.pincode}</p>
            <p>Type: ${address.addressType}</p>
            <button onclick="selectAddress('${address._id}')">Select this Address</button>
        `;

        // Append the new address to the address selection div
        addressSelectionDiv.appendChild(addressDiv);
    }

    // Function to handle form submission for adding an address
    async function submitAddressForm(event) {
        event.preventDefault(); // Prevent form from submitting normally

        // Gather form data
        const formData = new FormData(event.target);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/add-address', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();
            if (result.success) {
                // If successful, add the new address to the page
                addAddressToPage(result.data); // Pass the newly added address
                alert(result.msg); // Show success message
            } else {
                alert(result.msg); // Show error message if any
            }
        } catch (error) {
            console.error('Error adding address:', error);
            alert('There was an error adding the address.');
        }
    }

    // Attach submit handler to the form
    document.getElementById('addressForm').addEventListener('submit', submitAddressForm);
</script>

<script>document.querySelectorAll('.remove-btn').forEach(button => {
        button.addEventListener('click', function () {
            const addressId = this.getAttribute('data-address-id');

            fetch(`/delete-address/${addressId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'  // Set the X-Requested-With header
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Address deleted successfully.');
                        location.reload();  // Refresh to update the addresses list
                    } else {
                        alert('Failed to delete address: ' + data.msg);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the address.');
                });
        });
    });
</script>

<script>
    // Select all wishlist buttons
    document.querySelectorAll('.wishlist-button').forEach(button => {
        button.addEventListener('click', async (event) => {
            event.preventDefault(); // Prevent default link behavior

            const productId = button.getAttribute('data-product-id'); // Get product ID

            try {
                // Send AJAX request to the server
                const response = await fetch('/add-to-wishlist', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId }),
                });

                const data = await response.json(); // Parse the JSON response
                if (response.ok) {
                    // Success feedback (e.g., change the icon or show a toast)
                    alert(data.message || 'Product added to wishlist');
                    button.querySelector('i').classList.add('added'); // Add a class for styling
                } else {
                    // Handle errors
                    alert(data.error || 'Failed to add to wishlist');
                }
            } catch (err) {
                console.error(err);
                alert('An error occurred. Please try again.');
            }
        });
    });
</script>

<script>
    document.querySelectorAll('.remove-from-wishlist').forEach((button) => {
        button.addEventListener('click', async (event) => {
            event.preventDefault();

            const productId = button.getAttribute('data-product-id');

            try {
                const response = await fetch('/remove-from-wishlist', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId }),
                });

                const data = await response.json();
                if (response.ok) {
                    alert(data.message);
                    // Remove the row from the table
                    button.closest('tr').remove();
                } else {
                    alert(data.error || 'Failed to remove product');
                }
            } catch (err) {
                console.error(err);
                alert('An error occurred. Please try again.');
            }
        });
    });
</script>

<script>
    function changeQuantity(itemId, change, currentQuantity) {
        fetch('/update-cart-item', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ itemId, change }),
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    Swal.fire(data.message || 'Failed to update quantity.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire('An error occurred while updating the cart.');
            });
    }

</script>

<script>
    function setCouponCode(code) {
        const couponInput = document.getElementById('selectedCouponCode');
        couponInput.value = code;
    }

    document.getElementById('couponForm').addEventListener('submit', async function (e) {
        e.preventDefault();
        const couponCode = document.getElementById('selectedCouponCode').value;

        if (!couponCode) {
            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Please select or enter a coupon code.',
            });
            return;
        }

        try {
            const response = await fetch('/apply-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ couponCode }),
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Coupon Applied!',
                    text: `Discount Applied: â¹${data.discount}. New Total: â¹${data.newTotal}`,
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.msg || 'Failed to apply coupon.',
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Server Error',
                text: 'Something went wrong while applying the coupon.',
            });
        }
    });
</script>

<script>
    document.getElementById('removeCouponBtn').addEventListener('click', async function () {
        try {
            const response = await fetch('/remove-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Coupon Removed!',
                    text: `Discount removed. New Total: â¹${data.newTotal}`,
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.msg || 'Failed to remove coupon.',
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Server Error',
                text: 'Something went wrong while removing the coupon.',
            });
        }
    });
</script>


<script>
    async function placeOrder() {
        try {
            const selectedAddressInput = document.querySelector('input[name="address"]:checked');
            if (!selectedAddressInput) {
                console.log('No address selected');
                Swal.fire('Please select an address.');
                return;
            }
            //adding .value later will not give TypeError if no value is selected
            const selectedAddress = selectedAddressInput.value;

            // Check if payment method exists
            const paymentMethodInput = document.querySelector('input[name="paymentMethod"]:checked');
            if (!paymentMethodInput) {
                console.log('No payment method selected');
                Swal.fire('Please select a payment method.');
                return;
            }

            const paymentMethod = paymentMethodInput.value;

            const response = await fetch('/place-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ selectedAddress, paymentMethod }),
            });

            const data = await response.json();

            if (!data.success) {
                Swal.fire({
                    title: 'Error',
                    text: data.message || 'Order placement failed.',
                    icon: 'error',
                }).then(() => {
                    if (data.redirectUrl) {
                        window.location.href = data.redirectUrl; // Redirect if `redirectUrl` is provided
                    }
                });
                return;
            }

            if (paymentMethod === 'Razorpay') {
                initiateRazorpayPayment(data);
            } else if (paymentMethod === 'Wallet') {
                Swal.fire({
                    title: 'Order Successful',
                    text: 'Your order has been placed using your wallet',
                    icon: 'success',
                }).then(() => {
                    window.location.href = `/order-confirmation?orderId=${data.orderId}`;
                });
            }else {
                window.location.href = data.redirectUrl;
            }
        } catch (error) {
            console.error('Error placing order:', error);
            Swal.fire('Something went wrong. Please try again.');
        }
    }

    function initiateRazorpayPayment(data) {
        const options = {
            key: data.key,
            amount: data.amount,
            currency: data.currency,
            name: data.name,
            description: data.description,
            order_id: data.razorpayOrderId,
            handler: function (response) {
                verifyPayment(response, data.orderId);
            },
            theme: { color: "#fc4f4f" },
            modal: {
                escape: false, // prevent closing the modal with Esc key
                ondismiss: async function () {
                    await handlePaymentClosure(data.orderId);
                },
            },
        };

        const rzp = new Razorpay(options);

        rzp.on('payment.failed', async function (response) {
            await notifyPaymentFailure(data.orderId);

            alert('Payment failed. You will be redirected to view your order.')
            window.location.href = `/view-order?orderId=${data.orderId}`;

        });

        rzp.open();
    }

    async function handlePaymentClosure(orderId) {
        try {
            // Notify the server about the payment failure
            await notifyPaymentFailure(orderId);

            // Alert the user and redirect
            Swal.fire({
                icon: 'info',
                title: 'Payment Window Closed',
                text: 'You closed the payment window. You will be redirected to view your order.',
                confirmButtonText: 'OK',
            }).then(() => {
                window.location.href = `/view-order?orderId=${orderId}`;
            });
        } catch (error) {
            console.error('Error handling payment closure:', error);
            alert('Something went wrong. Please check your order status.');
        }
    }



    async function verifyPayment(paymentDetails, orderId) {
        try {
            const response = await fetch('/verify-payment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ paymentDetails, orderId }),
            });

            const data = await response.json();
            if (data.success) {
                window.location.href = `/order-confirmation?orderId=${orderId}`;
            } else {
                alert(data.message || 'Payment verification failed.');
            }
        } catch (error) {
            console.error('Error verifying payment:', error);
            alert('Something went wrong during payment verification.');
        }
    }

    async function notifyPaymentFailure(orderId) {
        try {
            await fetch('/notify-payment-failure', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId }),
            });
        } catch (error) {
            console.error('Error notifying payment failure:', error);
        }
    }
</script>

<script>
    document.getElementById("registerForm").addEventListener("submit", function (e) {
        let valid = true;

        const name = document.getElementById("name").value.trim();
        const nameError = document.getElementById("nameError");
        if (name === "") {
            nameError.textContent = "Name is required.";
            valid = false;
        } else {
            nameError.textContent = "";
        }

        const email = document.getElementById("email").value.trim();
        const emailError = document.getElementById("emailError");
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            emailError.textContent = "Enter a valid email address.";
            valid = false;
        } else {
            emailError.textContent = "";
        }

        const mobile = document.getElementById("mobile").value.trim();
        const mobileError = document.getElementById("mobileError");
        const mobileRegex = /^[0-9]{10}$/;
        if (!mobileRegex.test(mobile)) {
            mobileError.textContent = "Enter a valid 10-digit mobile number.";
            valid = false;
        } else {
            mobileError.textContent = "";
        }

        const password = document.getElementById("password").value.trim();
        const passwordError = document.getElementById("passwordError");
        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,}$/;
        if (!passwordRegex.test(password)) {
            passwordError.textContent =
                "Password must be at least 6 characters, include 1 uppercase letter, 1 lowercase letter, 1 number, and 1 special character.";
            valid = false;
        } else {
            passwordError.textContent = "";
        }

        // Confirm Password validation
        const confirmPassword = document.getElementById("confirmPassword").value.trim();
        const confirmPasswordError = document.getElementById("confirmPasswordError");
        if (confirmPassword !== password) {
            confirmPasswordError.textContent = "Passwords do not match.";
            valid = false;
        } else {
            confirmPasswordError.textContent = "";
        }

        // form submission prevernted
        if (!valid) {
            e.preventDefault();
        }
    });
</script>

<script>
    document.getElementById("loginForm").addEventListener("submit", function (e) {
        let valid = true;

        const email = document.getElementById("loginEmail").value.trim();
        const emailError = document.getElementById("loginEmailError");
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            emailError.textContent = "Enter a valid email address.";
            valid = false;
        } else {
            emailError.textContent = "";
        }

        const password = document.getElementById("loginPassword").value.trim();
        const passwordError = document.getElementById("loginPasswordError");
        if (password === "") {
            passwordError.textContent = "Password is required.";
            valid = false;
        } else {
            passwordError.textContent = "";
        }

        if (!valid) {
            e.preventDefault();
        }
    });
</script>

<script>
    function copyCode(code) {
        navigator.clipboard.writeText(code)
            .then(() => {
                Swal.fire('Code copied successfully');
            })
            .catch(err => {
                Swal.fire('Failed to copy code:', err);
            });
    }
</script>

<script>
    document.getElementById('referralForm').addEventListener('submit', async function (e) {
        e.preventDefault(); // Prevent form from submitting the traditional way

        const referralCode = document.getElementById('referralCode').value;

        try {
            const response = await fetch('/apply-referral-code', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ referralCode }) // Send referralCode in request body
            });

            const result = await response.json();

            if (response.ok) {
                // Success alert
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: result.msg || 'Referral code applied successfully. Rupees 100 added to your wallet'
                });
            } else {
                // Error alert
                Swal.fire({
                    icon: 'error',
                    text: result.msg || 'Failed to apply referral code.'
                });
            }
        } catch (error) {
            // Catch network or unexpected errors
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An unexpected error occurred. Please try again later.'
            });
            console.error('Error:', error);
        }
    });
</script>

</body>


</html>