<footer class="main-footer font-xs">
    <div class="row pb-30 pt-15">
        <div class="col-sm-6">
            <script>
                document.write(new Date().getFullYear())
            </script> Â©, Evara - HTML Ecommerce Template .
        </div>
        <div class="col-sm-6">
            <div class="text-sm-end">
                All rights reserved
            </div>
        </div>
    </div>
</footer>
</main>
<script src="assets/js/vendors/jquery-3.6.0.min.js"></script>
<script src="assets/js/vendors/bootstrap.bundle.min.js"></script>
<script src="assets/js/vendors/select2.min.js"></script>
<script src="assets/js/vendors/perfect-scrollbar.js"></script>
<script src="assets/js/vendors/jquery.fullscreen.min.js"></script>
<script src="assets/js/vendors/chart.js"></script>
<!-- Main Script -->
<script src="assets/js/main.js" type="text/javascript"></script>
<!-- <script src="assets/js/custom-chart.js" type="text/javascript"></script> -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.0/xlsx.full.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Active Menu Script -->
<script>
    document.querySelectorAll('.menu-link').forEach(link => {
        if (link.href === window.location.href) {
            link.parentElement.classList.add('active');
        } else {
            link.parentElement.classList.remove('active');
        }
    });
</script>

<script>
    document.getElementById('generateCode').onclick = function () {
        const randomCode = 'CP' + Math.random().toString(36).substr(2, 8).toUpperCase();
        document.getElementById('couponCode').value = randomCode;
    };

    document.addEventListener("DOMContentLoaded", function () {
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    const formattedDate = tomorrow.toISOString().split("T")[0];

    const expirationDateInput = document.getElementById("expirationDate");
    expirationDateInput.value = formattedDate;
    expirationDateInput.min = formattedDate;
});

function validateAddCouponForm() {
    console.log("Validating coupon form...");
    let isValid = true;

    function showError(id, message) {
        const errorElement = document.getElementById(id);
        if (errorElement) {
            errorElement.innerText = message;
        }
    }

    function clearError(id) {
        const errorElement = document.getElementById(id);
        if (errorElement) {
            errorElement.innerText = "";
        }
    }


    const name = document.getElementById("couponName").value.trim();
    const code = document.getElementById("couponCode").value.trim();
    const description = document.getElementById("description").value.trim();
    const discountPercentage = Number(document.getElementById("discountPercentage").value.trim());
    const minPurchaseAmount = document.getElementById("minPurchaseAmount").value.trim();
    const maxPurchaseAmount = document.getElementById("maxPurchaseAmount").value.trim();
    const expirationDate = document.getElementById("expirationDate").value;
    const maxUsers = Number(document.getElementById("maxUsers").value.trim());

    if (name === "") {
        showError("nameError", "Coupon Name is required");
        isValid = false;
    } else {
        clearError("nameError");
    }

    if (code === "") {
        showError("couponCodeError", "Coupon Code is required");
        isValid = false;
    } else {
        clearError("couponCodeError");
    }

    if (description === "") {
        showError("descriptionError", "Description is required");
        isValid = false;
    } else {
        clearError("descriptionError");
    }

    if (isNaN(discountPercentage) || discountPercentage < 1 || discountPercentage > 100) {
        showError("discountPercentageError", "Enter a valid discount between 1-100");
        isValid = false;
    } else {
        clearError("discountPercentageError");
    }

    if (minPurchaseAmount === "") {
        showError("minPurchaseAmountError", "Minimum purchase amount is required");
        isValid = false;
    } else if (isNaN(minPurchaseAmount) || Number(minPurchaseAmount) < 0) {
        showError("minPurchaseAmountError", "Enter a valid minimum purchase amount");
        isValid = false;
    } else {
        clearError("minPurchaseAmountError");
    }

    if (maxPurchaseAmount === "") {
        showError("maxPurchaseAmountError", "Maximum purchase amount is required");
        isValid = false;
    } else if(Number(maxPurchaseAmount) < 0){
        showError("maxPurchaseAmountError", "Enter a valid maximum purchase amount");
        isValid = false;
    } else if (isNaN(maxPurchaseAmount) || Number(maxPurchaseAmount) <= Number(minPurchaseAmount)) {
        showError("maxPurchaseAmountError", "Max amount must be greater than Min amount");
        isValid = false;
    } else {
        clearError("maxPurchaseAmountError");
    }

    const todayDate = new Date().toISOString().split("T")[0];
    if (expirationDate < todayDate) {
        showError("expirationDateError", "Expiration date must be in the future");
        isValid = false;
    } else {
        clearError("expirationDateError");
    }

    if (isNaN(maxUsers) || maxUsers <= 0) {
        showError("maxUsersError", "Enter a valid number of users (greater than 0)");
        isValid = false;
    } else {
        clearError("maxUsersError");
    }

    return isValid;
}


function addCoupon(event) {
    event.preventDefault();
    if (!validateAddCouponForm()) return;

    const formObject = {
        description: document.getElementById("description").value,
        name: document.getElementById("couponName").value,
        code: document.getElementById("couponCode").value,
        discountPercentage: document.getElementById("discountPercentage").value,
        minPurchaseAmount: document.getElementById("minPurchaseAmount").value,
        maxPurchaseAmount: document.getElementById("maxPurchaseAmount").value,
        expirationDate: document.getElementById("expirationDate").value,
        maxUsers: document.getElementById("maxUsers").value,
    };

    fetch("/admin/create-coupon", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formObject),
    })
        .then((response) => response.json())
        .then((data) => {
            if (data.success) {
                Swal.fire({
                    title: "Success!",
                    text: "Coupon created successfully.",
                    icon: "success",
                    confirmButtonText: "Cool",
                }).then(() => {
                    window.location.href = "/admin/coupon";
                });
            } else {
                Swal.fire({
                    title: "Error!",
                    text: data.message || "Failed to create coupon.",
                    icon: "error",
                    confirmButtonText: "Try Again",
                });
            }
        })
        .catch((error) => {
            console.error("Error:", error);
            Swal.fire({
                title: "Error!",
                text: "An error occurred while creating the coupon.",
                icon: "error",
                confirmButtonText: "Try Again",
            });
        });
}

document.getElementById("submitForm").addEventListener("click", addCoupon);

</script>

<script>
    document.getElementById("dateFilter").addEventListener("submit", function (event) {
        event.preventDefault();
        if (validateAndSubmit()) {
            this.submit();
        }
    });

    function validateAndSubmit() {
        if (validateForm()) {
            return true;
        } else {
            return false;
        }
    }


    function validateForm() {
        resetErrorMessage();
        console.log("Its start to working");
        let isValid = true;

        const startingDate = document.getElementById("startdate").value.trim();
        const endingDate = document.getElementById("enddate").value.trim();

        if (startingDate === "") {
            displayErrorMessage("startingDate-error", "Enter Starting date");
            isValid = false
        }

        if (endingDate === "") {
            displayErrorMessage("endingDate-error", "Enter Ending date");
            isValid = false;
        } else if (endingDate < startingDate) {
            displayErrorMessage("endingDate-error", "Should greater than starting date");
            isValid = false
        }

        return isValid;
    }
    function displayErrorMessage(elementId, message) {
        var errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
        errorElement.style.color = "red";
    }

    function resetErrorMessage() {
        var errorElements = document.querySelectorAll(".error-message");
        errorElements.forEach(function (element) {
            element.innerText = "";
            element.style.display = "none";
        });
    }

</script>

<script>
    function downloadPdf() {
        console.log('pdf download');

        const salesReport = document.getElementById("salesTable");
        const opt = {
            margin: 1,
            filename: 'sales_report.pdf',
            image: { type: 'jpeg', quality: 0.98 },
            html2canvas: { scale: 2 },
            jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
        };
        html2pdf().from(salesReport).set(opt).save();
    }

    function downloadExcel() {
        console.log('excel download');

        const salesReport = document.getElementById("salesTable");
        const ws = XLSX.utils.table_to_sheet(salesReport);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Sales Report");
        XLSX.writeFile(wb, "sales_report.xlsx");
    }
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const today = new Date().toISOString().split('T')[0]; // Get today's date in YYYY-MM-DD format
        document.getElementById('startdate').setAttribute('max', today);

        const form = document.getElementById('dateFilter');

        form.addEventListener('submit', function (event) {
            event.preventDefault();

            const startDate = document.getElementById('startdate').value.trim();
            const endDate = document.getElementById('enddate').value.trim();

            clearErrors();

            let isValid = true;

            // Validate Starting Date
            if (startDate === '') {
                showError('startingDate-error', 'Starting Date is required');
                isValid = false;
            } else {
                const start = new Date(startDate);
                if (start > new Date()) {
                    showError('startingDate-error', 'Starting Date cannot be in the future');
                    isValid = false;
                }
            }

            // Validate Ending Date
            if (endDate === '') {
                showError('endingDate-error', 'Ending Date is required');
                isValid = false;
            } else {
                const start = new Date(startDate);
                const end = new Date(endDate);
                if (startDate && start > end) {
                    showError('startingDate-error', 'Starting Date cannot be after Ending Date');
                    showError('endingDate-error', 'Ending Date cannot be before Starting Date');
                    isValid = false;
                }
            }

            if (isValid) {
                form.submit();
            }
        });
    });

    function showError(id, message) {
        const errorDiv = document.getElementById(id);
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
    }

    function clearErrors() {
        const errorDivs = document.querySelectorAll('.error-message');
        errorDivs.forEach(function (errorDiv) {
            errorDiv.textContent = '';
            errorDiv.style.display = 'none';
        });
    }
</script>
<script>
    document.getElementById("categoryForm").addEventListener("submit", function (e) {
        e.preventDefault();

        const name = document.getElementById("product_name").value.trim();
        const description = document.getElementById("description").value.trim();

        const nameError = document.getElementById("nameError");
        const descriptionError = document.getElementById("descriptionError");

        nameError.textContent = "";
        descriptionError.textContent = "";

        let isValid = true;

        if (name === "") {
            nameError.textContent = "Name is required.";
            isValid = false;
        } else if (name.length < 3) {
            nameError.textContent = "Name must be at least 3 characters long.";
            isValid = false;
        }

        if (description === "") {
            descriptionError.textContent = "Description is required.";
            isValid = false;
        } else if (description.length < 10) {
            descriptionError.textContent = "Description must be at least 10 characters long.";
            isValid = false;
        }

        if (isValid) {
            this.submit();
        }
    });
</script>

<script>
    document.getElementById('catOfferForm').addEventListener('submit', function (event) {
        let valid = true;

        document.getElementById('catOfferName-error').textContent = '';
        document.getElementById('catStartingDate-error').textContent = '';
        document.getElementById('catEndingDate-error').textContent = '';
        document.getElementById('category-error').textContent = '';
        document.getElementById('catDiscount-error').textContent = '';

        const name = document.getElementById('name').value.trim();
        if (!name) {
            valid = false;
            document.getElementById('catOfferName-error').textContent = 'Offer name is required.';
        }

        const startingDate = document.getElementById('catStartingDate').value.trim();
        if (!startingDate) {
            valid = false;
            document.getElementById('catStartingDate-error').textContent = 'Starting date is required.';
        }

        const endingDate = document.getElementById('catEndingDate').value.trim();
        if (!endingDate) {
            valid = false;
            document.getElementById('catEndingDate-error').textContent = 'Ending date is required.';
        } else if (new Date(endingDate) < new Date(startingDate)) {
            valid = false;
            document.getElementById('catEndingDate-error').textContent = 'Ending date cannot be before the starting date.';
        }

        const category = document.getElementById('category').value.trim();
        if (!category) {
            valid = false;
            document.getElementById('category-error').textContent = 'Category is required.';
        }

        const categoryDiscount = document.getElementById('categoryDiscount').value.trim();
        if (!categoryDiscount) {
            valid = false;
            document.getElementById('catDiscount-error').textContent = 'Category discount is required.';
        } else if (isNaN(categoryDiscount) || parseFloat(categoryDiscount) <= 0) {
            valid = false;
            document.getElementById('catDiscount-error').textContent = 'Please enter a valid discount value.';
        }

        if (!valid) {
            event.preventDefault();
        }
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('prdOfferForm');

        form.addEventListener('submit', function (event) {
            event.preventDefault(); 

            const name = document.getElementById('name').value.trim();
            const startingDate = document.getElementById('prdStartingDate').value.trim();
            const endingDate = document.getElementById('prdEndingDate').value.trim();
            const product = document.getElementById('products').value.trim();
            const productDiscount = document.getElementById('productDiscount').value.trim();

            clearErrors();

            let isValid = true;

            if (!name) {
                showError('prdOfferName-error', 'Offer Name is required');
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(name)) {
                showError('prdOfferName-error', 'Offer Name must contain only letters and spaces');
                isValid = false;
            }

            const today = new Date().toISOString().split('T')[0];
            if (!startingDate) {
                showError('prdStartingDate-error', 'Starting Date is required');
                isValid = false;
            } else if (startingDate > today) {
                showError('prdStartingDate-error', 'Starting Date cannot be in the future');
                isValid = false;
            }

            if (!endingDate) {
                showError('prdEndingDate-error', 'Ending Date is required');
                isValid = false;
            } else if (startingDate && startingDate > endingDate) {
                showError('prdStartingDate-error', 'Starting Date cannot be after Ending Date');
                showError('prdEndingDate-error', 'Ending Date cannot be before Starting Date');
                isValid = false;
            }

            if (!product) {
                showError('error4', 'Please select a product');
                isValid = false;
            }

            if (!productDiscount) {
                showError('prdDiscount-error', 'Product Discount is required');
                isValid = false;
            } else if (isNaN(productDiscount)) {
                showError('prdDiscount-error', 'Product Discount must be a number');
                isValid = false;
            } else if (productDiscount < 0 || productDiscount > 100) {
                showError('prdDiscount-error', 'Product Discount must be between 0 and 100');
                isValid = false;
            }

            if (isValid) {
                form.submit(); 
            }
        });

        function showError(id, message) {
            const errorDiv = document.getElementById(id);
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
        }

        function clearErrors() {
            const errorDivs = document.querySelectorAll('.error-message');
            errorDivs.forEach(function (errorDiv) {
                errorDiv.textContent = '';
                errorDiv.style.display = 'none';
            });
        }
    });
</script>


<script>
    let myChart;

    function getChartData(type) {
        const labels = JSON.parse(document.getElementById(`${type}Labels`).value);
        const data = JSON.parse(document.getElementById(`${type}Data`).value);
        return { labels, data };
    }

    function renderChart(type) {
        const chartData = getChartData(type);

        const ctx = document.getElementById('myChart').getContext('2d');

        if (myChart) {
            myChart.destroy();
        }

        myChart = new Chart(ctx, {
            type: 'line', 
            data: {
                labels: chartData.labels,
                datasets: [{
                    label: `${type.charAt(0).toUpperCase() + type.slice(1)} Sales`,
                    data: chartData.data,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    document.getElementById('dailyBtn').addEventListener('click', () => renderChart('daily'));
    document.getElementById('weeklyBtn').addEventListener('click', () => renderChart('weekly'));
    document.getElementById('monthlyBtn').addEventListener('click', () => renderChart('monthly'));
    document.getElementById('yearlyBtn').addEventListener('click', () => renderChart('yearly'));

    renderChart('daily');
</script>
<script>
    document.getElementById('createReportBtn').addEventListener('click', function (event) {
        event.preventDefault();

        const section = document.getElementById('reportSection');

        const options = {
            margin: 1,
            filename: 'report.pdf',
            image: { type: 'jpeg', quality: 0.98 },
            html2canvas: { scale: 2 },
            jsPDF: { unit: 'in', format: 'letter', orientation: 'landscape' }
        };

        html2pdf().from(section).set(options).save();
    });
</script>
<script>
    async function acceptReturn(orderId, itemId) {
        try {
            const response = await fetch('/admin/accept-return', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId, itemId })
            });

            const result = await response.json();
            if (response.ok) {
                Swal.fire(result.msg).then(()=>{
                    window.location.reload();
                });
            } else {
                Swal.fire(result.msg);
            }
        } catch (error) {
            console.error('Error accepting the return request:', error);
            Swal.fire('An error occurred. Please try again.');
        }
    }
</script>
<script>
    async function rejectReturn(orderId, itemId) {
        try {
            const response = await fetch('/admin/reject-return', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId, itemId })
            });

            const result = await response.json();
            if (response.ok) {
                Swal.fire(result.msg).then(()=>{
                    window.location.reload();
                });
            } else {
                Swal.fire(result.msg);
            }
        } catch (error) {
            console.error('Error rejecting the return request:', error);
            Swal.fire('An error occurred. Please try again.');
        }
    }
</script>
<script>
    const form = document.getElementById('editCouponForm');

    form.addEventListener('submit', async (e) => {
        e.preventDefault(); 
        
        let isValid = true;

        document.querySelectorAll('.text-danger').forEach((error) => (error.textContent = ''));

        const name = document.getElementById('couponName').value.trim();
        if (name === '') {
            document.getElementById('nameError').textContent = 'Coupon name is required.';
            isValid = false;
        }

        const description = document.getElementById('description').value.trim();
        if (description === '') {
            document.getElementById('descriptionError').textContent = 'Description is required.';
            isValid = false;
        }

        const discountPercentage = document.getElementById('discountPercentage').value;
        if (discountPercentage === '' || discountPercentage < 0) {
            document.getElementById('discountPercentageError').textContent = 'Discount percentage must be 0 or greater.';
            isValid = false;
        }

        const minPurchaseAmount = document.getElementById('minPurchaseAmount').value;
        if (minPurchaseAmount === '' || minPurchaseAmount < 0) {
            document.getElementById('minimumAmountError').textContent = 'Minimum purchase amount must be 0 or greater.';
            isValid = false;
        }

        const maxPurchaseAmount = document.getElementById('maxPurchaseAmount').value;
        if (maxPurchaseAmount === '' || maxPurchaseAmount < 0) {
            document.getElementById('maximumAmountError').textContent = 'Maximum purchase amount must be 0 or greater.';
            isValid = false;
        } else if (parseFloat(maxPurchaseAmount) < parseFloat(minPurchaseAmount)) {
            document.getElementById('maxPurchaseAmountError').textContent =
                'Maximum purchase amount must be greater than or equal to the minimum purchase amount.';
            isValid = false;
        }

        const expirationDate = document.getElementById('expirationDate').value;
        if (expirationDate === '') {
            document.getElementById('expirationDateError').textContent = 'Expiration date is required.';
            isValid = false;
        } else if (new Date(expirationDate) < new Date()) {
            document.getElementById('expirationDateError').textContent = 'Expiration date must be in the future.';
            isValid = false;
        }

        const maxUsers = document.getElementById('maxUsers').value;
        if (maxUsers === '' || maxUsers <= 0) {
            document.getElementById('maxUsersError').textContent = 'Maximum users must be greater than 0.';
            isValid = false;
        }

        if (!isValid) return;

        const formData = new FormData(form);
        const formObject = Object.fromEntries(formData.entries());

        try {
            const response = await fetch(form.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formObject),
            });

            const result = await response.json();

            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: result.message,
                    confirmButtonText: 'OK',
                }).then(() => {
                    window.location.reload(); 
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message,
                    confirmButtonText: 'Try Again',
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Oops!',
                text: 'Something went wrong. Please try again later.',
                confirmButtonText: 'OK',
            });
        }
    });
</script>
<script>
    function validateAddProductForm() {
    let isValid = true;

    // Clearing previous errors
    document.getElementById("nameError").innerText = "";
    document.getElementById("descriptionError").innerText = "";
    document.getElementById("brandError").innerText = "";
    document.getElementById("genderError").innerText = "";
    document.getElementById("priceError").innerText = "";
    document.getElementById("discountPriceError").innerText = "";
    document.getElementById("stockError").innerText = "";
    document.getElementById("categoryError").innerText = "";
    document.getElementById("mainError").innerText = "";

    // Fetching values
    let name = document.getElementById("product_name").value.trim();
    let description = document.getElementById("product_description").value.trim();
    let brand = document.getElementById("brand_name").value.trim();
    let gender = document.getElementById("gender_name").value;
    let price = document.getElementById("regular_price").value.trim();
    let discountPrice = document.getElementById("discount_price").value.trim();
    let stock = document.getElementById("stock_count").value.trim();
    let category = document.getElementById("category").value;
    let images = document.getElementById("inputImage").files;

    // Validation checks
    if (name === "") {
        document.getElementById("nameError").innerText = "Product name is required.";
        isValid = false;
    }
    if (description === "") {
        document.getElementById("descriptionError").innerText = "Description is required.";
        isValid = false;
    }
    if (brand === "") {
        document.getElementById("brandError").innerText = "Brand name is required.";
        isValid = false;
    }
    if (!gender) {
        document.getElementById("genderError").innerText = "Please select a gender.";
        isValid = false;
    }
    if (price === "" || isNaN(price) || Number(price) <= 0) {
        document.getElementById("priceError").innerText = "Enter a valid price.";
        isValid = false;
    }
    if (discountPrice === "" || isNaN(discountPrice) || Number(discountPrice) < 0 || Number(discountPrice) > Number(price)) {
        document.getElementById("discountPriceError").innerText = "Enter a valid discount price.";
        isValid = false;
    }
    if (stock === "" || isNaN(stock) || Number(stock) < 1) {
        document.getElementById("stockError").innerText = "Enter a valid stock count (minimum 1).";
        isValid = false;
    }
    if (!category) {
        document.getElementById("categoryError").innerText = "Please select a category.";
        isValid = false;
    }
    if (images.length > 3) {
        document.getElementById("mainError").innerText = "You can only upload a maximum of 3 images.";
        isValid = false;
    }

    return isValid;
}

</script>

</body>

</html>